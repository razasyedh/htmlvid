#!/usr/bin/env python

"""htmlgif

A tool to create html5 snippets of videos.

Usage info is autogenerated by the argparse module and can be accessed by
running the program with the '-h' option.
"""

import sys
# import subprocess
import configargparse


def get_args():
    """Obtain the arguments entered for our program on the command line."""
    def time_stamp(string):
        """Test that our timestamp conforms to the proper format."""
        error = False

        length = len(string)
        if length < 8 or length > 12:
            error = True

        semicolon_count = string.count(":")
        if semicolon_count != 2:
            error = True

        if not error:
            return string
        else:
            msg = "%r is not in the hh:mm:ss[.xxx] format." % string
            raise argparse.ArgumentTypeError(msg)

    def crf(string):
        """Test that the quality number is within our range."""
        quality = int(string)
        if quality >= 0 and quality <= 63:
            return quality
        else:
            msg = "%r is out of the quality range. (0-63)" % string
            raise argparse.ArgumentTypeError(msg)

    def filesize(string):
        """Test if the filesize argument has a proper suffix."""
        if string.endswith("K") or string.endswith("M"):
            return string
        else:
            msg = "%r does not include a K or M suffix." % string
            raise argparse.ArgumentTypeError(msg)




    # Define all of our arguments and their help messages
    parser = configargparse.ArgumentParser(add_help=False, prog="htmlgif",
                                           description="A tool to create html5"
                                                       " snippets of videos.",
                                           epilog="For additional help, see"
                                                  " man %(prog)s")

    group0 = parser.add_argument_group("Required Options")
    group0.add_argument("video", #type=file,
                        help="The path to the video file.")

    group1 = parser.add_argument_group("General Options")
    group1.add_argument("-h", "--help", action="help",
                        help="Print this help message.")
    group1.add_argument("-v", "--verbose", action="store_true",
                        help="Show verbose output for ffmpeg.")
    group1.add_argument("-L", "--log", action="store_true",
                        help="View the log of the last run.")

    group2 = parser.add_argument_group("Time Options",)
    group2.add_argument("-s", "--start", metavar="time", type=time_stamp,
                        help="Time to start at in hh:mm:ss[.xxx] format."
                             " (Only milliseconds are optional)")
    group2.add_argument("-t", "--to", metavar="dur",
                        help="The duration in seconds and milliseconds.")
    group2.add_argument("-D", "--duplicate", action="store_true",
                        help="Copy whole video. (Incompatible with -s/-t)")

    group3 = parser.add_argument_group("Format Options")
    group3.add_argument("-W", "--webm", action="store_true",
                        help="Create a webM. (Default)")
    group3.add_argument("-m", "--mp4", action="store_true",
                        help="Create an MP4 instead of webM. Quality works on"
                             " a different scale.")
    group3.add_argument("-S", "--sound", action="store_true",
                        help="Include sound.")

    group4 = parser.add_argument_group("Quality Options", "Use -l if you know"
                                       " size limit, else -q with -b")
    group4.add_argument("-q", "--quality", metavar="crf", type=crf,
                        help="Quality threshold. Lower is better. Defaults:"
                             " 10 for webm (4-63) and 23 for mp4 (0-51).")
    group4.add_argument("-b", "--bitrate", metavar="rate", type=filesize,
                        help="Bitrate to use. Must include K or M suffix."
                             " (Default: 750K)")
    group4.add_argument("-l", "--limit", metavar="size", type=filesize,
                        help="Set quality and bitrate to fit in the maximum"
                             " specified size. Must include K or M suffix."
                             " 2-pass.")
    group4.add_argument("-p", "--twopass", action="store_true",
                        help="Run two passes.")

    group5 = parser.add_argument_group("Filters")
    group5.add_argument("-w", "--width", metavar="num", type=int,
                        help="The width of the output file. Enter 0 for no"
                             " scaling. (Default: 640)")



    # Display a help message if the program is run without arguments
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    # Get arguments and print a friendly error for missing files
    try:
        arguments = vars(parser.parse_args())
    except IOError:
        print "error: positional argument video: file does not exist."
        sys.exit(1)


    # Check for conflicting options
    if arguments["mp4"]:
        if arguments["webm"]:
            print "error: argument -m/--mp4: Conflicting use with -W."
            sys.exit(1)

    if arguments["copy"]:
        if arguments["start"] is not None or arguments["to"] is not None:
            print "error: argument -C/--copy: Conflicting use with -s/-t."
            sys.exit(1)

    if arguments["limit"] is not None:
        if arguments["quality"] is not None or arguments["bitrate"] is not None:
            print "error: argument -l/--limit: Conflicting use with -q/-b."
            sys.exit(1)

        if not arguments["twopass"]:
            arguments["twopass"] = True


    return arguments




def main():
    """Get options from config file and the command line. Then use them to
    create and execute our ffmpeg command.
    """
    args = get_args()

    for key in args:
        print key, ":", args[key]

    sys.exit(0)


if __name__ == "__main__":
    main()


# pass the config arguments as a dictionary to argparse


# make sure to set the proper loglevel for ffmpeg

# option to detect what flags ffmpeg was compiled with to remove unused options

# try variable bitrate only for -l (-b:v) and leave out the -crf
# B:V (max bitrate for crf) might have no effect for mp4's. test it out, might
#  have to use presets

# subcommand to concat and cut up files?

# https://trac.ffmpeg.org/wiki/Encode/VP8
# https://trac.ffmpeg.org/wiki/Encode/H.264
# constant quality mode is reccomended for libpvx
# -q uses Variable bitrate, -l uses constant quality
# This version of ffmpeg has nonfree parts compiled in. Therefore it is not
# legally redistributable.

# -vv to make htmlgif verbose along with ffmpeg
# -o to name output

